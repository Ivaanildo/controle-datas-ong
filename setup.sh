#!/bin/bash

# Script de Setup Automatizado - Sistema ONG
# Autor: Ivanildo Nogueira Lima
# Vers√£o: 1.0.0

set -e  # Sair em caso de erro

echo "üè¢ Sistema de Controle de Datas para ONGs"
echo "=========================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Python est√° instalado
check_python() {
    print_status "Verificando instala√ß√£o do Python..."
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 n√£o est√° instalado. Por favor, instale Python 3.11 ou superior."
        exit 1
    fi
    
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
    print_success "Python $PYTHON_VERSION encontrado"
}

# Criar ambiente virtual
create_venv() {
    print_status "Criando ambiente virtual..."
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "Ambiente virtual criado"
    else
        print_warning "Ambiente virtual j√° existe"
    fi
}

# Ativar ambiente virtual
activate_venv() {
    print_status "Ativando ambiente virtual..."
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        source venv/Scripts/activate
    else
        source venv/bin/activate
    fi
    print_success "Ambiente virtual ativado"
}

# Instalar depend√™ncias
install_dependencies() {
    print_status "Instalando depend√™ncias..."
    pip install --upgrade pip
    pip install -r requirements.txt
    print_success "Depend√™ncias instaladas"
}

# Configurar arquivo .env
setup_env() {
    print_status "Configurando arquivo de ambiente..."
    if [ ! -f ".env" ]; then
        cp .env.example .env
        print_success "Arquivo .env criado a partir do .env.example"
        print_warning "Por favor, edite o arquivo .env com suas configura√ß√µes"
    else
        print_warning "Arquivo .env j√° existe"
    fi
}

# Configurar banco de dados
setup_database() {
    print_status "Configurando banco de dados..."
    
    # Criar diret√≥rio instance se n√£o existir
    mkdir -p instance
    mkdir -p logs
    
    # Executar migra√ß√µes
    export FLASK_APP=run.py
    flask db upgrade
    
    print_success "Banco de dados configurado"
}

# Inserir dados iniciais
insert_initial_data() {
    print_status "Inserindo dados iniciais..."
    if [ -f "scripts/cadastrar_categorias.py" ]; then
        python scripts/cadastrar_categorias.py
        print_success "Categorias padr√£o inseridas"
    else
        print_warning "Script de categorias n√£o encontrado"
    fi
}

# Executar testes
run_tests() {
    print_status "Executando testes..."
    if command -v pytest &> /dev/null; then
        pytest --verbose
        print_success "Todos os testes passaram"
    else
        print_warning "pytest n√£o est√° dispon√≠vel. Instalando..."
        pip install pytest pytest-flask
        pytest --verbose
    fi
}

# Verificar instala√ß√£o
verify_installation() {
    print_status "Verificando instala√ß√£o..."
    python -c "from app import create_app; app = create_app(); print('‚úÖ Aplica√ß√£o criada com sucesso')"
    print_success "Instala√ß√£o verificada"
}

# Menu principal
show_menu() {
    echo ""
    echo "Escolha uma op√ß√£o:"
    echo "1) Instala√ß√£o completa (recomendado)"
    echo "2) Apenas instalar depend√™ncias"
    echo "3) Apenas configurar banco de dados"
    echo "4) Executar testes"
    echo "5) Iniciar aplica√ß√£o"
    echo "6) Build Docker"
    echo "7) Sair"
    echo ""
}

# Instala√ß√£o completa
full_install() {
    print_status "Iniciando instala√ß√£o completa..."
    check_python
    create_venv
    activate_venv
    install_dependencies
    setup_env
    setup_database
    insert_initial_data
    run_tests
    verify_installation
    print_success "Instala√ß√£o completa finalizada!"
    echo ""
    echo "Para iniciar a aplica√ß√£o, execute:"
    echo "  source venv/bin/activate  # Linux/Mac"
    echo "  venv\\Scripts\\activate     # Windows"
    echo "  python run.py"
    echo ""
    echo "Ou use o Docker:"
    echo "  docker-compose up"
}

# Build Docker
build_docker() {
    print_status "Construindo imagem Docker..."
    docker build -t sistema-ong:latest .
    print_success "Imagem Docker constru√≠da"
    
    print_status "Voc√™ pode executar com:"
    echo "  docker run -p 5000:5000 sistema-ong:latest"
    echo "Ou usar docker-compose:"
    echo "  docker-compose up"
}

# Iniciar aplica√ß√£o
start_app() {
    print_status "Iniciando aplica√ß√£o..."
    if [ -d "venv" ]; then
        activate_venv
    fi
    
    export FLASK_APP=run.py
    export FLASK_ENV=development
    
    print_success "Aplica√ß√£o iniciando em http://localhost:5000"
    python run.py
}

# Script principal
main() {
    while true; do
        show_menu
        read -p "Digite sua escolha [1-7]: " choice
        
        case $choice in
            1)
                full_install
                break
                ;;
            2)
                check_python
                create_venv
                activate_venv
                install_dependencies
                ;;
            3)
                setup_database
                insert_initial_data
                ;;
            4)
                run_tests
                ;;
            5)
                start_app
                break
                ;;
            6)
                build_docker
                ;;
            7)
                print_status "Saindo..."
                exit 0
                ;;
            *)
                print_error "Op√ß√£o inv√°lida. Tente novamente."
                ;;
        esac
        echo ""
    done
}

# Executar script principal
main
